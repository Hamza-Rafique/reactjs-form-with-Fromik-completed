{"ast":null,"code":"import _classCallCheck from \"/Users/fe-mac-hamza/Desktop/React-Form-with-Formik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/fe-mac-hamza/Desktop/React-Form-with-Formik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/fe-mac-hamza/Desktop/React-Form-with-Formik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/fe-mac-hamza/Desktop/React-Form-with-Formik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { number as locale } from './locale';\nimport isAbsent from './util/isAbsent';\nimport BaseSchema from './schema';\n\nvar isNaN = function isNaN(value) {\n  return value != +value;\n};\n\nexport function create() {\n  return new NumberSchema();\n}\n\nvar NumberSchema = /*#__PURE__*/function (_BaseSchema) {\n  _inherits(NumberSchema, _BaseSchema);\n\n  var _super = _createSuper(NumberSchema);\n\n  function NumberSchema() {\n    var _this;\n\n    _classCallCheck(this, NumberSchema);\n\n    _this = _super.call(this, {\n      type: 'number'\n    });\n\n    _this.withMutation(function () {\n      _this.transform(function (value) {\n        var parsed = value;\n\n        if (typeof parsed === 'string') {\n          parsed = parsed.replace(/\\s/g, '');\n          if (parsed === '') return NaN; // don't use parseFloat to avoid positives on alpha-numeric strings\n\n          parsed = +parsed;\n        }\n\n        if (this.isType(parsed)) return parsed;\n        return parseFloat(parsed);\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(NumberSchema, [{\n    key: \"_typeCheck\",\n    value: function _typeCheck(value) {\n      if (value instanceof Number) value = value.valueOf();\n      return typeof value === 'number' && !isNaN(value);\n    }\n  }, {\n    key: \"min\",\n    value: function min(_min) {\n      var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : locale.min;\n      return this.test({\n        message,\n        name: 'min',\n        exclusive: true,\n        params: {\n          min: _min\n        },\n\n        test(value) {\n          return isAbsent(value) || value >= this.resolve(_min);\n        }\n\n      });\n    }\n  }, {\n    key: \"max\",\n    value: function max(_max) {\n      var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : locale.max;\n      return this.test({\n        message,\n        name: 'max',\n        exclusive: true,\n        params: {\n          max: _max\n        },\n\n        test(value) {\n          return isAbsent(value) || value <= this.resolve(_max);\n        }\n\n      });\n    }\n  }, {\n    key: \"lessThan\",\n    value: function lessThan(less) {\n      var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : locale.lessThan;\n      return this.test({\n        message,\n        name: 'max',\n        exclusive: true,\n        params: {\n          less\n        },\n\n        test(value) {\n          return isAbsent(value) || value < this.resolve(less);\n        }\n\n      });\n    }\n  }, {\n    key: \"moreThan\",\n    value: function moreThan(more) {\n      var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : locale.moreThan;\n      return this.test({\n        message,\n        name: 'min',\n        exclusive: true,\n        params: {\n          more\n        },\n\n        test(value) {\n          return isAbsent(value) || value > this.resolve(more);\n        }\n\n      });\n    }\n  }, {\n    key: \"positive\",\n    value: function positive() {\n      var msg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : locale.positive;\n      return this.moreThan(0, msg);\n    }\n  }, {\n    key: \"negative\",\n    value: function negative() {\n      var msg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : locale.negative;\n      return this.lessThan(0, msg);\n    }\n  }, {\n    key: \"integer\",\n    value: function integer() {\n      var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : locale.integer;\n      return this.test({\n        name: 'integer',\n        message,\n        test: function test(val) {\n          return isAbsent(val) || Number.isInteger(val);\n        }\n      });\n    }\n  }, {\n    key: \"truncate\",\n    value: function truncate() {\n      return this.transform(function (value) {\n        return !isAbsent(value) ? value | 0 : value;\n      });\n    }\n  }, {\n    key: \"round\",\n    value: function round(method) {\n      var _method;\n\n      var avail = ['ceil', 'floor', 'round', 'trunc'];\n      method = ((_method = method) == null ? void 0 : _method.toLowerCase()) || 'round'; // this exists for symemtry with the new Math.trunc\n\n      if (method === 'trunc') return this.truncate();\n      if (avail.indexOf(method.toLowerCase()) === -1) throw new TypeError('Only valid options for round() are: ' + avail.join(', '));\n      return this.transform(function (value) {\n        return !isAbsent(value) ? Math[method](value) : value;\n      });\n    }\n  }]);\n\n  return NumberSchema;\n}(BaseSchema);\n\nexport { NumberSchema as default };\ncreate.prototype = NumberSchema.prototype; //\n// Number Interfaces\n//","map":{"version":3,"sources":["/Users/fe-mac-hamza/Desktop/React-Form-with-Formik/node_modules/yup/es/number.js"],"names":["number","locale","isAbsent","BaseSchema","isNaN","value","create","NumberSchema","type","withMutation","transform","parsed","replace","NaN","isType","parseFloat","Number","valueOf","min","message","test","name","exclusive","params","resolve","max","less","lessThan","more","moreThan","msg","positive","negative","integer","val","isInteger","method","_method","avail","toLowerCase","truncate","indexOf","TypeError","join","Math","prototype"],"mappings":"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","sourcesContent":["import { number as locale } from './locale';\nimport isAbsent from './util/isAbsent';\nimport BaseSchema from './schema';\n\nlet isNaN = value => value != +value;\n\nexport function create() {\n  return new NumberSchema();\n}\nexport default class NumberSchema extends BaseSchema {\n  constructor() {\n    super({\n      type: 'number'\n    });\n    this.withMutation(() => {\n      this.transform(function (value) {\n        let parsed = value;\n\n        if (typeof parsed === 'string') {\n          parsed = parsed.replace(/\\s/g, '');\n          if (parsed === '') return NaN; // don't use parseFloat to avoid positives on alpha-numeric strings\n\n          parsed = +parsed;\n        }\n\n        if (this.isType(parsed)) return parsed;\n        return parseFloat(parsed);\n      });\n    });\n  }\n\n  _typeCheck(value) {\n    if (value instanceof Number) value = value.valueOf();\n    return typeof value === 'number' && !isNaN(value);\n  }\n\n  min(min, message = locale.min) {\n    return this.test({\n      message,\n      name: 'min',\n      exclusive: true,\n      params: {\n        min\n      },\n\n      test(value) {\n        return isAbsent(value) || value >= this.resolve(min);\n      }\n\n    });\n  }\n\n  max(max, message = locale.max) {\n    return this.test({\n      message,\n      name: 'max',\n      exclusive: true,\n      params: {\n        max\n      },\n\n      test(value) {\n        return isAbsent(value) || value <= this.resolve(max);\n      }\n\n    });\n  }\n\n  lessThan(less, message = locale.lessThan) {\n    return this.test({\n      message,\n      name: 'max',\n      exclusive: true,\n      params: {\n        less\n      },\n\n      test(value) {\n        return isAbsent(value) || value < this.resolve(less);\n      }\n\n    });\n  }\n\n  moreThan(more, message = locale.moreThan) {\n    return this.test({\n      message,\n      name: 'min',\n      exclusive: true,\n      params: {\n        more\n      },\n\n      test(value) {\n        return isAbsent(value) || value > this.resolve(more);\n      }\n\n    });\n  }\n\n  positive(msg = locale.positive) {\n    return this.moreThan(0, msg);\n  }\n\n  negative(msg = locale.negative) {\n    return this.lessThan(0, msg);\n  }\n\n  integer(message = locale.integer) {\n    return this.test({\n      name: 'integer',\n      message,\n      test: val => isAbsent(val) || Number.isInteger(val)\n    });\n  }\n\n  truncate() {\n    return this.transform(value => !isAbsent(value) ? value | 0 : value);\n  }\n\n  round(method) {\n    var _method;\n\n    var avail = ['ceil', 'floor', 'round', 'trunc'];\n    method = ((_method = method) == null ? void 0 : _method.toLowerCase()) || 'round'; // this exists for symemtry with the new Math.trunc\n\n    if (method === 'trunc') return this.truncate();\n    if (avail.indexOf(method.toLowerCase()) === -1) throw new TypeError('Only valid options for round() are: ' + avail.join(', '));\n    return this.transform(value => !isAbsent(value) ? Math[method](value) : value);\n  }\n\n}\ncreate.prototype = NumberSchema.prototype; //\n// Number Interfaces\n//"]},"metadata":{},"sourceType":"module"}